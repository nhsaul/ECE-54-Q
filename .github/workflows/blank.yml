#include <stdio.h>
#include <stdlib.h>

struct Joueur {
    char nom[20];
    int x, y;
    int barrieres_restantes ;
};

char plateau[17][17];
struct Joueur joueurs[4];
int nombre_joueurs=0;
int joueur_actuel  = 0;


void initialiser_plateau() {
    for (int i = 0; i < 17; i++) {
        for (int j = 0; j < 17; j++) {
            if (i % 2 == 0 && j % 2 == 0) {
                plateau[i][j] = '.';
            } else {
                plateau[i][j] = '+';
            }
        }
    }


    plateau[0][8] = '1';
    plateau[16][8] = '2';
    joueurs[0].x = 0; joueurs[0].y = 8;
    joueurs[1].x = 16; joueurs[1].y = 8;

    if (nombre_joueurs == 4) {
        plateau[8][0] = '3';
        plateau[8][16] = '4';
        joueurs[2].x = 8; joueurs[2].y = 0;
        joueurs[3].x = 8; joueurs[3].y = 16;
    }
}
void afficher_plateau() {
    printf("\n     "); 
    for (int j = 0; j < 17; j++) {
        printf("%2d ", j); 
    }
    printf("\n");

    for (int i = 0; i < 17; i++) {
        printf("%2d   ", i); 
        for (int j = 0; j < 17; j++) {
            printf(" %c ", plateau[i][j]);
        }
        printf("\n");
    }
}


void initialiser_joueurs() {
    while(nombre_joueurs != 4 && nombre_joueurs != 2){
        printf("Entrez le nombe de joueurs (2 ou 4):\n");
        scanf("%d", &nombre_joueurs);
    }

    for (int i = 0; i < nombre_joueurs; i++) {
        printf("Entre le nom du Joueur %d:\n", i + 1);
        scanf("%s", joueurs[i].nom);
        joueurs[i].barrieres_restantes = 20/nombre_joueurs;
    }
}

void deplacer_pion(struct Joueur *joueur, int numero_joueur) {
int x, y;
int deplacement_valide = 0;

while (!deplacement_valide) {
printf("donner les coodonées %s (ligne col): ", joueur->nom);
scanf("%d %d", &x, &y);


if (x >= 0 && x < 17 && y >= 0 && y < 17 && plateau[x][y] == '.' &&
abs(joueur->x - x) + abs(joueur->y - y) == 2) {
plateau[joueur->x][joueur->y] = '.';  
joueur->x = x;
joueur->y = y;
plateau[x][y] = '1' + numero_joueur; 
deplacement_valide = 1; 
} else {
printf("Déplacement impossible! Essayez à nouveau.\n");
}
}
}


void poser_barriere(struct Joueur *joueur) {
if (joueur->barrieres_restantes > 0) {
int x, y, orientation;
int barriere_valide = 0;

while (!barriere_valide) {
printf("Entrez les coordonnées de la barrière (ligne col, doit être '+'): ");
scanf("%d %d", &x, &y);
printf("Entrez l'orientation (1 pour horizontal, 2 pour vertical): ");
scanf("%d", &orientation);


if (orientation == 1 && x % 2 == 1 && y % 2 == 0 && y + 2 < 17 &&
plateau[x][y] == '+' && plateau[x][y + 2] == '+') {
plateau[x][y] = plateau[x][y + 1] = plateau[x][y + 2] = '-';  
joueur->barrieres_restantes--;
barriere_valide = 1; 
} else if (orientation == 2 && x % 2 == 0 && y % 2 == 1 && x + 2 < 17 &&
plateau[x][y] == '+' && plateau[x + 2][y] == '+') {
plateau[x][y] = plateau[x + 1][y] = plateau[x + 2][y] = '|'; 
joueur->barrieres_restantes--;
barriere_valide = 1; 
} else {
printf("Position  invalide! Essayez à nouveau.\n");
}
}
} else {
printf("Vous n'avez plus de barrières \n");
}
}

int verifier_victoire() {
    if (joueurs[0].x == 16) {
        printf("%s a gagne!\n", joueurs[0].nom);
        return 1;
    }
    if (joueurs[1].x == 0) {
        printf("%s a gagne!\n", joueurs[1].nom);
        return 1;
    }
    if (nombre_joueurs == 4) {
        if (joueurs[2].y == 16) {
            printf("%s a gagne!\n", joueurs[2].nom);
            return 1;
        }
        if (joueurs[3].y == 0) {
            printf("%s a gagné!\n", joueurs[3].nom);
            return 1;
        }
    }
    return 0;
}

void tour_de_jeu() {
    struct Joueur *joueur = &joueurs[joueur_actuel];
    int choix;

    printf("\nTour de %s (Barrieres restantes : %d)\n1. Deplacer le pion\n2. Poser une barriere\n",
           joueur->nom, joueur->barrieres_restantes);
    scanf("%d", &choix);

    if (choix == 1) {
        deplacer_pion(joueur, joueur_actuel);
    } else if (choix == 2) {
        poser_barriere(joueur);
    } else {
        printf("Choix invalide!\n");
    }
}

void menu() {
    initialiser_joueurs();
    initialiser_plateau();

    while (1) {
        afficher_plateau();
        tour_de_jeu();

        if (verifier_victoire())
            break;

        joueur_actuel = (joueur_actuel + 1) % nombre_joueurs;
    }
}

int main() {
    menu();
    return 0;
}
l
l
l
l
l
l
l
l
l
l
ll
l
l
l
l
l
l
l
l
l
ll
l
l
ll
l
l
ll
l
l
ll
l
l
l
l
l
l
l
l
l
l
l
l

ll
l
l
l
l
l
11
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
a

[![.github/workflows/blank.yml](https://github.com/nhsaul/ECE-54-Q/actions/workflows/blank.yml/badge.svg)](https://github.com/nhsaul/ECE-54-Q/actions/workflows/blank.yml)
