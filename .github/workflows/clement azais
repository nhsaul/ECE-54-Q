void deplacer_pion(struct Joueur *joueur, int numero_joueur) {
int x, y;
int deplacement_valide = 0;

while (!deplacement_valide) {
printf("Entrez les nouvelles coordonnées pour %s (ligne col): ", joueur->nom);
scanf("%d %d", &x, &y);


if (x >= 0 && x < 17 && y >= 0 && y < 17 && plateau[x][y] == '.' &&
abs(joueur->x - x) + abs(joueur->y - y) == 2) {
plateau[joueur->x][joueur->y] = '.';  
joueur->x = x;
joueur->y = y;
plateau[x][y] = '1' + numero_joueur; 
deplacement_valide = 1; 
} else {
printf("Déplacement invalide! Essayez à nouveau.\n");
}
}
}

void poser_barriere(struct Joueur *joueur) {
if (joueur->barrieres_restantes > 0) {
int x, y, orientation;
int barriere_valide = 0;

while (!barriere_valide) {
printf("Entrez les coordonnées de la barrière (ligne col, doit être '+'): ");
scanf("%d %d", &x, &y);
printf("Entrez l'orientation (1 pour horizontal, 2 pour vertical): ");
scanf("%d", &orientation);


if (orientation == 1 && x % 2 == 1 && y % 2 == 0 && y + 2 < 17 &&
plateau[x][y] == '+' && plateau[x][y + 2] == '+') {
plateau[x][y] = plateau[x][y + 1] = plateau[x][y + 2] = '-';  
joueur->barrieres_restantes--;
barriere_valide = 1; // Barrière posée avec succès
} else if (orientation == 2 && x % 2 == 0 && y % 2 == 1 && x + 2 < 17 &&
plateau[x][y] == '+' && plateau[x + 2][y] == '+') {
plateau[x][y] = plateau[x + 1][y] = plateau[x + 2][y] = '|'; 
joueur->barrieres_restantes--;
barriere_valide = 1; 
} else {
printf("la barrière ne peux pas etre la essayer a nouveau \n");
}
}
} else {
printf("les barrières sont épuisés\n");
}
}
